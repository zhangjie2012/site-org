#+SETUPFILE: ~/site/tpl/wiki-tpl.org
#+TITLE: 云原生
#+DATE: 2020-02-01 09:30:20

* 定义

2015 ~ 2018 年，CNCF 对于云原生的定义主要包含三个方面：

- 面向微服务架构
- 应用容器化部署
- 基于容器的编排和调度（Kubernetes）

2018 年后，CNCF 对于云原生的定义改为：

#+begin_quote
云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。

这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。

云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。
#+end_quote

来自 https://github.com/cncf/toc/blob/master/DEFINITION.md

云原生代表技术：不可变的基础设施、声明式 API。容器、服务网格、微服务。

*什么是不可变的基础设施？*

https://segmentfault.com/a/1190000040449782

#+begin_quote
- 在程序设计中，不可变变量（Immutable Variable）就是在完成赋值之后就不能发生更改，只能创建新的来整体替换旧的。
- 对于基础设施的不可变性，最基本的就是指运行的服务器在完成部署后，就不再更改。
#+end_quote

* 常见的术语

- [[https://www.cncf.io/][CNCF]] The Cloud Native Computing Foundation，云原生计算基金会。
- [[https://opencontainers.org/][OCI]] Open Container Initiative，开放容器标准。
  是一个轻量级的，开放的治理结构（项目），在 Linux 基金会的支持下成立，旨在围绕容器格式和运行时创建的开放行业标准。
  OCI 于 2015 年 6 月由 Docker，CoreOS 和其他容器行业领导者成立。当前包含两种规范：
  + [[https://github.com/opencontainers/runtime-spec][runtime-spec]] 运行时规范
  + [[https://github.com/opencontainers/image-spec][image-spec]] 镜像规范
- [[https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/][CRI]] Container Runtime Interface，由 protocol buffers 和 gRPC API 和一些库组成。
  是 Kubernetes 提出的给 kubelet 来管理节点的容器来用的。符合 CRI 的容器，Kubernetes 就可以直接使用。
  目前 CRI 的实现有 Containerd，CRI-O，Docker 不符合 CRI，所以 Kubernetes 写了 [[https://github.com/kubernetes/kubernetes/tree/release-1.5/pkg/kubelet/dockershim][dockershim]] 来做协议转换
  （这也是 Kubernetes v1.20 之后废弃 Docker 的原因， =kubelet->dockershim->dockerd->containerd= 这个链路太长，
  废弃之后改成了 =kubelet->containerd= ）。

* 服务可用性定义

谷歌 SRE 对服务的可用性进行了如下三个维度的定义。[fn:6]

** SLA(Service-Level Agreement)：服务级别协议

#+begin_quote
是服务提供商与客户之间定义的正式承诺，SLO 是 SLA 的基础。
#+end_quote

注意：是官方的承诺，是协议、合同。出了问题是要承担责任的。

我们经常说的 N 个 9，对应的宕机容忍（计算器[fn:7]）：

|       x | 一年   | 一月  | 一周  | 一日    | 适用产品           |
|---------+--------+-------+-------+---------+--------------------|
|   99.9% | 8h45m  | 43m   | 10m5s | 1m26s   | 个人电脑或者服务器 |
|  99.99% | 52m34s | 4m19s | 1m    | 9s      | 企业级设备         |
| 99.995% | 26m17s | 2m10s | 30s   | 4s      | 数据库             |
| 99.999% | 5m15s  | 26s   | 6s    | 不足 1s | 电信级设备         |

阿里云、AWS 等主机的 SLA 是每月 99.95%，即超过 5 分钟主机不可用（可获得赔偿）。

** SLO(Service-Level Objective)：服务级别目标

#+begin_quote
指服务提供者向客户作出的服务保证的量化指标。
#+end_quote

注意：是可量化的目标，目标可以包含很多的 SLA。

** SLI (Service-Level Indicator)：服务级别指标

#+begin_quote
是对服务提供商提供给客户的服务级别的度量。是 SLO 的基础，通用性的度量指标，比如：延迟、吞吐量、可用性、错误率。
#+end_quote

延迟、吞吐量、可用性、错误率也是目前最常用来度量服务的四个维度（很多监控都是这四个维度的范畴和延伸）。

* TODO 容器
* TODO Docker
** Docker CLI 替代品：Container Tools（podman、buildah、skopeo）

#+begin_quote
Docker CLI 真的越来越臃肿了（啥都不干，内存好几 G 没了），集合了 compose、swarm、Kubernetes。而且很明显现在整个云原生生态
有种不带 Docker 玩的感觉（这也不能全怪 CNCF，毕竟曾经人家抛了橄榄枝，他非要自己玩），再加上国内网络原因，Docker 的每次升
级慢的令人发指。
#+end_quote

容器官方提供了 [[https://github.com/containers][Container Tools]]，工具集合，其中包含了覆盖 Docker 不同场景的工具。Docker CLI 被拆分成了 3 个工具：

|---------+---------------------------------------+-------------------------+--------|
| 官网    | github                                | 说明                    | 笔记   |
|---------+---------------------------------------+-------------------------+--------|
| [[https://podman.io/][podman]]  | https://github.com/containers/podman  | OCI 容器和 Pod 管理工具 | [[file:container-tools/podman.org][podman]] |
| [[https://github.com/containers/buildah][buildah]] | https://github.com/containers/buildah | 构建 OCI 镜像工具       |        |
| [[https://github.com/containers/skopeo][skopeo]]  | https://github.com/containers/skopeo  | 镜像仓库工具            |        |
|---------+---------------------------------------+-------------------------+--------|

整个理念来说，打的是无守护进程，无需 root 的招牌，但实际上，这些东西我并不关心。拆分成 3 个工具，会加大学习成本，所以我只
关注 podman 一个替代日常的 Docker CLI 操作。

Mac 不是纯正的 Linux 系统，所以不管是 Docker 还是 podman 都需要引入一个中间层的 Linux 虚拟机。这块 Docker 做的还是不错的，
但是 podman 不行（配置要进入虚拟机，而且主机目录挂载也是个问题）。

结论是：听起来很好，Mac 下实际可行性较差。

* CI/CD 项目

- [[https://argoproj.github.io/][argo]] Get More Done with Kubernetes
- [[https://fluxcd.io/][flux]] 云原生体系下的持续部署，GitOps

* Kubernetes

Kubernetes 是开源的微服务或者容器化应用的编排工具，是谷歌开发的集群管理工具（前身是谷歌内部运行十几年的集群管理工具 Borg[fn:2]，
Kubernetes 吸取 Borg 的经验，然后针对社区定制的开源版本[fn:1]），现已捐赠给 CNCF[fn:4]。

Kubernetes 提供了服务发现和负载均衡、自动部署和回滚、弹性伸缩、健康检测和服务自愈等特性。它的主要目标是通过提供一组 REST APIS
来隐藏管理容器的复杂性[fn:3]。

** 概念（Concepts）

以下文档大都来自 Kubernetes 官方文档 [[https://kubernetes.io/docs/concepts/][Concepts]]，加上自己的理解。

- 概览
  + [[file:kubernetes/what-is-kubernetes.org][什么是 Kubernetes?]]:  Kubernetes 是一个用于管理容器化的工作负载和服务的可移植的、可扩展的、开源平台，便于声明式配置和自动化。
    它拥有庞大且快速增长的生态系统。Kubernetes 的服务，支持和工具广泛可用。
  + [[file:kubernetes/components.org][Kubernetes 组件]]: Kubernetes 集群由代表控制平面（control pane）的组件和一组称之为节点的机器组成。
  + [[file:kubernetes/kubernetes-api.org][Kubernetes API]]: Kubernetes API 允许你查询和操作 Kubernetes 集群中的对象状态。Kubernetes 控制平面的核心是它的
    API server 和它暴露的 HTTP API。用户和集群的不同组件以及外部组件都是通过 API server 进行通信。
  + 与 Kubernetes 对象一起工作: Kubernetes 对象是 Kubernetes 系统中的持久化实体。Kubernetes 使用这些实体来表示集群的状态。
    - [[file:kubernetes/kubernetes-objects.org][理解 Kubernetes 对象]]
    - [[file:kubernetes/object-management.org][Kubernetes 对象管理]]
    - [[file:kubernetes/object-name-and-id.org][对象名称和 IDs]]
    - [[file:kubernetes/object-namespace.org][命名空间（Namespaces）]]
    - [[file:kubernetes/label-and-selector.org][Labels 和 Selectors]]
    - [[file:kubernetes/object-annotation.org][注解（Annotations）]]
    - [[file:kubernetes/object-field-selectors.org][字段选择器（Field Selectors）]]
    - [[file:kubernetes/object-common-label.org][推荐的 Labels]]
- [[file:kubernetes/architecture.org][集群架构]]: kubernetes 架构与组件概览
  + [[file:kubernetes/architecture-nodes.org][节点]]
  + [[file:kubernetes/architecture-control-plane-node-communication.org][控制平面节点通信]]
  + [[file:kubernetes/architecture-controller.org][控制器]]
  + [[file:kubernetes/architecture-cloud-controller.org][云控制器管理器]]
- [[file:kubernetes/container.org][容器]]
  + [[file:kubernetes/containers-images.org][镜像]]
  + [[file:kubernetes/containers-container-environment.org][容器环境]]
  + [[file:kubernetes/containers-runtime-class.org][运行时类]] RuntimeClass
  + [[file:kubernetes/containers-container-lifycycle-hooks.org][容器生命周期 Hooks]]
- [[file:kubernetes/workloads.org][工作负载（workloads）]]
  + [[file:kubernetes/workloads-pods.org][Pods]] [3/6]
    - [X] [[file:kubernetes/pod.org][Pod]]: 概念、为什么需要 Pod、状态标识、健康检查、生命周期等
    - [X] [[file:kubernetes/workloads-pods-pod-lifecycle.org][Pod Lifecyle]]
    - [X] [[file:kubernetes/workloads-pods-init-containers.org][Init Containers]]
    - [ ] [[https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/][Pod 拓扑扩展约束]]
    - [ ] [[https://kubernetes.io/docs/concepts/workloads/pods/disruptions/][中断]]
    - [ ] [[https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/][临时容器]]
  + 工作负载资源
    + [[file:kubernetes/controller-deployments.org][Deployments]]: 用于无状态服务部署，在 ReplicaSet 基础上提供了更新策略等
    + [[file:kubernetes/controller-replicaset.org][ReplicaSet]]: 保证一组 Pod 副本在集群的正常运行
    + [[file:kubernetes/controller-statefulsets.org][StatefulSets]]: 用于部署无状态应用（ZooKeeper，Kafka，Redis 等）
    + [[file:kubernetes/controller-daemonset.org][DaemonSet]]: 每个节点上跑一个 Pod，用作类似日志收集、系统监控等功能
    + [[file:kubernetes/controller-job.org][Jobs]] 一次性的任务
    + [[file:kubernetes/controller-ttlafterfinished.org][TTL Controller for Finished Resources]]: 在对象执行完成后 TTL 秒，回收资源（目前仅用于 Job）
    + [[file:kubernetes/controller-cronjobs.org][CronJobs]] 定时任务
    + +ReplicationController+: ReplicaSet 是下一代的 RC（支持新的基于集合的标签选择器），建议使用 RS
    + [[file:kubernetes/controller-gc.org][Garbage Collection]]: 负责集群资源回收
- [[file:kubernetes/services-networking.org][Services、负载均衡和集群网络]] [2/11]
  + [X] [[file:kubernetes/service.org][Service]] 集群内部的服务暴露抽象，提供虚拟 IP，然后通过负载均衡策略，将流量转发到 Endpoints。
    底层实现是 kube-proxy，它支持三种模式（用户空间，iptables，IPVS），主流都是使用 IPVS
  + [ ] [[file:kubernetes/service-topology.org][服务拓扑]] 实现基于 Service 的亲和性
  + [X] [[file:kubernetes/service-networking-dns-pod-service.org][Services 和 Pod 的 DNS]]
  + [ ] [[https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/][使用 Services 连接应用]]
  + [ ] [[https://kubernetes.io/docs/concepts/services-networking/ingress/][Ingress]]
  + [ ] [[https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/][Ingress Controllers]]
  + [ ] [[https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/][EndpointSlices]]
  + [ ] [[https://kubernetes.io/docs/concepts/services-networking/service-traffic-policy/][Service 内部流量策略]]
  + [ ] [[https://kubernetes.io/docs/concepts/services-networking/topology-aware-hints/][拓扑感知提示]]
  + [ ] [[https://kubernetes.io/docs/concepts/services-networking/network-policies/][网络策略]]
  + [ ] [[https://kubernetes.io/docs/concepts/services-networking/dual-stack/][IPv4/IPv6 双栈]]
- 存储: Volumes, Persistent Volumes, Storage Class 等 [1/11]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/volumes/][Volumes]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/persistent-volumes/][持久化卷]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/volume-snapshots/][卷快照]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/][CSI 卷克隆]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/storage-classes/][Storage Classes]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/volume-snapshot-classes/][Volume Snapshot Classes]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/][Dynamic Volume Provisioning]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/storage-capacity/][Storage Capacity]]
  + [X] [[file:kubernetes/storage-ephemeral-volumes.org][临时卷]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/storage-limits/][Node-specific Volume Limits]]
  + [ ] [[https://kubernetes.io/docs/concepts/storage/volume-health-monitoring/][Volume Health Monitoring]]
- 配置 [0/5]
  + [ ] [[https://kubernetes.io/docs/concepts/configuration/overview/][配置最佳实践]]
  + [ ] [[https://kubernetes.io/docs/concepts/configuration/configmap/][ConfigMaps]]
  + [ ] [[https://kubernetes.io/docs/concepts/configuration/secret/][Secrets]]
  + [ ] [[https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/][为容器管理资源]]
  + [ ] [[https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/][Organizing Cluster Access Using kubeconfig Files]]
- 安全 [0/3]
  - [ ] [[https://kubernetes.io/docs/concepts/security/overview/][云原生安全概览]]
  - [ ] [[https://kubernetes.io/docs/concepts/security/pod-security-standards/][Pod 安全标准]]
  - [ ] [[https://kubernetes.io/docs/concepts/security/controlling-access/][控制 Kubernetes API 访问]]
- 策略（Policies） [0/5]
  - [ ] [[https://kubernetes.io/docs/concepts/policy/limit-range/][Limit Ranges]]
  - [ ] [[https://kubernetes.io/docs/concepts/policy/resource-quotas/][Resource Quotas]]
  - [ ] [[https://kubernetes.io/docs/concepts/policy/pod-security-policy/][Pod 安全策略]]
  - [ ] [[https://kubernetes.io/docs/concepts/policy/pid-limiting/][进程 ID 限制和保留]]
  - [ ] [[https://kubernetes.io/docs/concepts/policy/node-resource-managers/][节点资源管理器]]
- [[https://kubernetes.io/docs/concepts/scheduling-eviction/][调度，抢占（Preemption）和驱逐（Eviction）]] [0/10]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/][Kubernetes 调度器]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/][把 Pods 分配给节点]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/][Pod 开销]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/][污点和容忍]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/][Pod 优先级和抢占（Pod Priority and Preeemption）]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/][节点压力驱逐]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/api-eviction/][API 发起的驱逐]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/resource-bin-packing/][Resource Bin Packing for Extended Resources]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/][调度框架]]
  - [ ] [[https://kubernetes.io/docs/concepts/scheduling-eviction/scheduler-perf-tuning/][调度器性能调优]]
- [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/][集群管理]] [0/9]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/certificates/][证书]]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/][管理资源]]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/networking/][集群网络]]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/logging/][日志架构]]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/system-metrics/][Kubernetes 系统组件指标]]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/system-logs/][系统日志]]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/proxies/][Kubernetes 中的代理]]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/flow-control/][API Priority and Fairness]]
  - [ ] [[https://kubernetes.io/docs/concepts/cluster-administration/addons/][安装插件]]
- [ ] 扩展 Kubernetes [0/4]
  - [ ] [[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/][扩展 Kubernetes API]]
    - [ ] [[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/][自定义资源]]
    - [ ] [[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/][Extending the Kubernetes API with the aggregation layer]]
  - [ ] 计算，存储和网络扩展
    - [ ] [[https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/][网络插件]]
    - [ ] [[https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/][设备插件]]
  - [ ] [[https://kubernetes.io/docs/concepts/extend-kubernetes/operator/][Operator 模式]]
  - [ ] [[https://kubernetes.io/docs/concepts/extend-kubernetes/service-catalog/][Service Catalog]]

** 搭建本地 Kubernetes

一般用于 K8s 学习和应用程序开发人员。

- [[https://minikube.sigs.k8s.io/docs/][minikube]]
- [[https://kind.sigs.k8s.io/][kind]]：全称：”Kubernetes In Docker“，集群节点运行于 Docker 中，很快
- [[https://k3s.io/][K3S]]：轻量级的 K8s，旨在资源匮乏的位于边缘的物联网和边缘设备上运行 K8s，可以在 VMWare 和 VirtualBox 等虚拟机环境下运行
  简单、安全、优化的 K8s 环境
- [[https://microk8s.io/][MicroK8s]] 如其名，微小的 K8s

minikube 和 kind 的定位是完全相同的：避免 K8s 安装复杂，用于开发人员本地学习，K3s 和 MicroK8s 也可以实现相同的效果，不过
他们的定位是提供生产级别的 IoT 和边缘场景下的 K8s 需求。

** 构建部署

- [[https://helm.sh/zh/][Helm]] Kubernetes 包管理器，用于项目的（含多个微服务，以及每个服务的依赖配置）打包、部署、回滚等生命周期管理
- [[https://kubernetes.io/docs/concepts/extend-kubernetes/operator/][operator]] CRD + Controller = Operator，可以认为 Operator 是自定义资源的控制器。Operator 用来对 K8s API 进行扩展，用来创建
  配置和管理复杂的应用（数据库、消息中间件、缓存等）。

Helm 一般用于无状态应用的部署，类似中间件的服务也有开源的 charts，但是一般中间件的场景都需要更细粒度的控制，大厂都是用
Operator 来做的。

当然 Helm 要比 Operator 要简单多了，毕竟只是一个工具。好在官方提供了 [[https://github.com/kubernetes-sigs/kubebuilder][kubebuilder]] 和 [[https://github.com/kubernetes/code-generator][code generator]] 等工具可自动生成代码。

目前社区已经开源了很多 helm charts 和 operators：

- https://artifacthub.io/
- https://operatorhub.io/

** kubectl CLI

kubectl 是用来管理 Kubernetes 集群的命令行工具。

- [[file:kubernetes/kubectl-official.org][官方说明]]
- [[file:kubernetes/kubectl-common.org][常用命令集合]]

** 最佳实践

大规模集群注意事项，Kubernetes 旨在适应满足一下标准的配置环境：

- 单节点不超过 110 个 Pods
- 单集群不超过 5000 个节点
- 单集群总 Pods 数量不超过 15000 个
- 单集群总容器不超过 30000 个

** 监控告警

- [[file:kubernetes/monitor.org][监控]]: 通过 kube-state-metrics 和 cAdvisor 暴露指标

** 管理平台

Kubernetes 管理平台一般是对 K8s 能力平台化，降低运维管理成本（标准化化、自动化，DevOps），覆盖应用研发迭代生命周期（CI、CD、告警、日志等）。

- [[https://www.okd.io/][OKD]] OpenShift 的社区版本，红帽 OpenShift 应该是业内做的比较早的的企业级混合云（PaaS），算是行业标杆吧
- [[https://docs.rancher.cn/][rancher]] 2016 Rancher Labs 发布 1.0 rancher，2020年12月1日，公司被 [[https://www.suse.com/zh-cn/][suse]] 收购
- [[https://kubesphere.io/zh/][KubeSphere]] 全栈的 Kubernetes 容器云 PaaS 解决方案，如他的描述。KubeSphere 适合作为小企业的私有云，常用的功能比较完备，开箱即用
- [[https://github.com/portainer/portainer][portainer]] 轻量级的 Docker、Docker swarm、Kubernetes 集群管理工具（可以算成一个界面化管理工具）

如果没有一定的容器化、DevOps 人员储备不太敢用 K8s，即便开箱急用的管理平台在生产环境使用大家也不太敢用。那换过来，有人员储
备之后，用原生的开源的各组件方案自研一套难度也不大（而且可以根据业务所需选择合适的技术体系，灵活性高，也易于接受）。所以，
很多企业是不太会用类似的管理平台的（或者有一种场景，有强力的 K8s 运维能力，但是无平台研发能力可以选择）。另外，如果企业直
接使用云服务，云厂商也都提供了简易的 UI 界面来操作 K8s。

* 日志体系

** 数据收集 agent

- [[https://www.fluentd.org/][fluentd]]：开源的数据收集器，2011 年至今，2016.11.8 被 CNCF 所录取，2019 年成为毕业项目。
  + 数据统一结构化为 JSON
  + 可插拔，支持多种上游数据源（data sources）和下游输出（data output）
  + 低资源消耗：使用 C，Ruby 混合编码
  + 数据可靠：支持内存和文件缓冲，防止数据丢失，还只是故障转移（高可用）；2000+ 数据驱动公司背书

* Service Mash

*Istio*

2017年5月，Google、IBM 和 Lyft [[https://istio.io/latest/news/releases/0.x/announcing-0.1/][宣布]] Istio 开源。

- [[https://cloudnative.to/blog/jimmy-service-mesh-talk/][都 2021 年了，对于服务网格，社区到底在讨论什么？]] 2021年11月24日，“Istio 架构已经稳定，生产可用，生态正处于萌芽中”

* Serverless

- [[https://knative.dev/docs/][Knative]] “2018.07 首次发布 Knative，2021.11 发布 1.0 版本”

* Resources

- [[file:../../blog/2018/an-overall-view-on-docker-ecosystem-containers-moby-swarm-linuxkit-containerd-kubernete.org][Docker 生态系统一览]] 翻译的文章，较为详细的说明了 Docker 的前世今生
- [[https://www.qikqiak.com/post/containerd-usage/][一文搞懂容器运行时 Containerd]] <2021-08-12 Thu> 搞清楚 libcontainer, runc, containerd, CRI, OCI 之间的关系
- [[file:../../blog/2021/kubernetes-vs-docker.org][Kubernetes vs Docker]] 2021 翻译的文章，容器、Docker、Kubernetes 之间的关系，
  Kubernetes v1.20 开始废弃了 Dockershim 之后，对于研发人员、管理员以及 CI/CD 流程上会有哪些影响？
- [[https://12factor.net/zh_cn/][12-Factor]] 构建 SaaS 应用方法论
- [[https://kubernetesreadme.com/][kubernetes README]] Kubernetes 书籍、教程和其它资源列表
- [[https://events19.linuxfoundation.org/wp-content/uploads/2017/11/How-Container-Runtime-Matters-in-Kubernetes_-OSS-Kunal-Kushwaha.pdf][How Container Runtimes matter in Kubernetes?]] PPT，Kubernetes 中的运行时
- [[https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-assets-prod/presentation-media/hyper-kata-frakti-cri2.pdf][Unified Kubernetes CRI runtimes based on Kata Containers]] PPT，理解 Kubernetes 中的运行时
- [[https://brennerm.github.io/posts/kubernetes-overview-diagrams.html][Kubernetes Overview Diagrams]] Kubernetes 概述图（很帅），涵盖架构，工作负载，网络存储，RBAC，资源 requests 和 limits 等
- [[file:kubernetes/gce-kubernetes-best-practive-series.org][GCE Kubernetes 最佳实践系列]]
- [[https://jimmysong.io/kubernetes-handbook/concepts/pause-container.html][Pause 容器]]，也称之为 Infra 容器，Pause 即暂停，但并不是停止状态，而是启动之后就会把自己阻塞住，什么都不干
  + 目标是为了解决多个容器之间最高效的共享某些资源和数据（打破 Linux Namespace/cgroups 隔离），
    Pause 是为了解决网络问题（如何共享网络）；
  + Pod 中的其他容器 Join namespace 的方式加入到 Pause 容器的 Network namespace。所以其他容器所看到的网络设备、IP 地址、
    Mac 地址等网络信息都是 Pause 容器的；
  + Pause 容器为业务容器提供：
    1. Linux namespace 的基础；
    2. 启用 pid 命名空间，开启 init 进程。
- [[file:kubernetes/minreadyseconds-and-readiness.org][minReadySeconds 与 Readiness Probe]] 更好的理解 Pod 启动
- [[https://stackoverflow.com/questions/53534553/kubernetes-cni-vs-kube-proxy][cni 和 kube-proxy 的区别]]
  - CNI：保证每个 Pod 都有一个独立的 IP，而且他们之间可以相互通信，确保 Pod 可以向集群外部通讯
  - kube-proxy：是 service 的实现，拥有一个虚拟的 IP，在下游的 endpoints 之间做负载均衡
- [[https://lib.jimmysong.io/][云原生资料库]]
- [[https://ossinsight.io/][OSSInsight]] Github 项目洞察，某种程度可以看到开源趋势，但是社区毕竟是社区，只可以参考
- [[file:kubernetes/kubernetes-best-practive.org][最佳实践系列]] 别人家的最佳实践合集

** 书籍

- [ ] Kubernetes: Up and Running
- [ ] Kubernetes in Action
- [ ] Kubernetes Patterns
- [ ] Kubernetes Best Practices
- [ ] Cloud Native Patterns
- [ ] Kubernetes Patterns
- [ ] The Kubernetes Book 这本书每年都会更新一次，以跟上最新的 Kubernetes 生态

* Footnotes

[fn:7] http://www.slatools.com/sla-uptime-calculator

[fn:6] https://cloud.google.com/blog/products/devops-sre/sre-fundamentals-slis-slas-and-slos

[fn:5] https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes

[fn:4] https://zh.wikipedia.org/wiki/Kubernetes

[fn:3] https://wiki.aquasec.com/display/containers/Kubernetes+Architecture+101

[fn:2] [[https://research.google/pubs/pub44843/][Borg, Omega, and Kubernetes]]

[fn:1] [[https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/][Borg: The Predecessor to Kubernetes]]
