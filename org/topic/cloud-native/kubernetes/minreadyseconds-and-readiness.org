#+SETUPFILE: ~/site/tpl/wiki-tpl.org
#+TITLE: minReadySeconds 和 Readiness Probe
#+DATE: 2021-10-13 17:14:51

在 K8s 服务启动的时间顺序很容易混淆。 [[https://stackoverflow.com/questions/53239081/how-does-minreadyseconds-affect-readiness-probe][minReadySeconds 与 Readiness Probe]] 这里会有些解释：

+ =.spec.minReadySeconds= 是一个可选的字段，用于指定 Pod 从创建到就绪所需要的最小秒数，这个时间结束之后会被视为 Pod 可用。
  默认值是 0[fn:1]；
+ =initialDelaySeconds= 表示容器启用探针之前的秒数。假设 Pod 启动需要 =t= 秒，那么在 =t+initialDelaySeconds= 之后；
  探针开始执行。假设 =t1= 秒之后 Pod 就绪(=t1>t+initialDelaySeconds=)，那么 Pod 会在 =t1+minReadySeconds= 之后认为可用；
+ 也就是说 =initialDelaySeconds= 和健康检测，都是发生在 =minReadySeconds= 之前的；

--------------------

一些理解，不一定对。

K8s Pod 的启动可以分成两个阶段：

1. 容器启动
2. 应用启动

一个服务是否真正对外可用，是通过应用启动成功，并且应用是健康的。但是这一点，从 K8s 上无法准确的检测到。所以才加了很多的辅助手段。

这里面还隐含了一个知识点，应用可以对外提供通常是以 Pod 的 Endpoint 加到 service 来算的。

在这个背景下，重新梳理一下：

- =.spec.minReadySeconds= 用来表示 Pod 就绪的所需要的时间，只是一个数值限制。Pod 设置为就绪。
  *就绪不代表已经对外提供服务，只是说已经准备好了，隐含了 K8s 认为容器和应用都启动 OK 了*
- =initialDelaySeconds= 表示 K8s 从容器开始执行健康监测的延迟时间。
  跟 =minReadySeconds= 没什么关系，只是说从这时间之后，我就要开始健康监测了。

Pod 如何对外提供服务？在 Pod 就绪之后，健康监测 OK ，此时会把 Pod 添加到 service 中。所以在 K8s 中我们可以看到一个临界状态，Pod 已经 ready，但是还没提供服务。

如果没有配置健康监测，Pod 标记为 Ready，就会加到 service 中。

* Footnotes

[fn:1] https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
