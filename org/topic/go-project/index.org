#+SETUPFILE: ~/site/tpl/wiki-tpl.org
#+TITLE:  构建 Go 项目最佳实践
#+DATE: 2021-04-27 15:33:45

* 目录结构

Go 目前没有一个权威性质的 Web framework（类似 Python 的 Django/Flask，Java 的 SprintBoot 等），大部分 Web 框架所做的事情
是 router + middleware 的方式。并没有提供了一个如何组织项目代码，划分模块的规范。这可能与 Go 生态圈的文化和语言的应用场景有关。

尽管如此，还是需要一个规范性的东西来约束，方便协作。评价比较高的有 [[https://github.com/golang-standards/project-layout][project-layout]]，它参考了主流的 Go 开源代码的组织方式，
2019 年开始我也进行了断断续续的翻译 [[file:project-layout.org][Go 项目布局标准]]。现在官方也支持 [[https://github.com/golang-standards/project-layout/blob/master/README_zh.md][中文版]] 了。实际体验下来，大体思路是没错的，但对于构建一个 Web 服务
来说，还是太过宽泛了。所以我根据自己的经验，在 Go project layout 的基础上整理了一套属于自己的规范。

- [[file:project-layout.org][Go 项目目录结构]]
- [[https://gitlab.com/JerryZhang2012/go-http-server-template][go-http-server-template]] 针对 http 服务器模板，涉及：

* 包管理

以前用 govender，go 1.11 之后统一使用 module 了。[[file:../../wiki/programming/go/package-manager.org][包管理工具]]。

- [[https://encore.dev/guide/go.mod][Go modules cheat sheet]]

* package 发布

一个 github 的 Go 项目如何发布？[[file:../../wiki/programming/go/go-package-release.org][Go 项目发布]]。

* 技术选型

- [[file:go-web-framework.org][Web 框架选择]]
- [[file:redis.org][Redis]]
- [[file:log.org][Go logger packages]]
- [[file:go-mysql.org][Go MySQL]]，还是使用 ent 吧
- [[file:go-mongodb.org][Go MongoDB]]
- http client：[[https://github.com/go-resty/resty][resty]]

* 编码规范

- 使用 [[https://golangci-lint.run/usage/configuration/][golangci-lint]] 作为 linter，[[https://gitlab.com/JerryZhang2012/dotfiles/-/blob/master/_golangci.yaml][我的配置]]，macOS 下添加软链到 =~/.golangci.yaml=
- [[https://github.com/uber-go/guide][uber go guide]]

* 服务质量

- [[file:write-go-testing.org][单元测试]]
- [[file:monitor.org][使用 Prometheus 监控 API]]
- [[file:go-profile.org][调优]]

* 上线

- [[file:build-deploy.org][构建和部署]]
